유석진:
	모듈의 장점
	1. 모듈은 단 한번만 도입되며, 비용이 사실상 0이다.
	2. 기호 중복 정의 문제가 거의 발생하지 않는다.
	3. 논리적 구조를 표현하는 데 유리하다.
	4. 모듈 밖으로 노출할 것인지 명시적으로 지정할 수 있다.
	5. include guard, pragma once를 사용할 필요가 없다.
	[아쉽]
	파이썬의 모듈처럼 import하지 못하는 점이 아쉬움:
	C++20의 표준 라이브러리는 아직 모듈화되지 않아 모듈을 만들고 빌드하기가 쉽지는 않았다.
	Renderer 모듈을 세분화 해 Bind기능을 수행하는 모듈, 렌더 기능을 수행하는 모듈로 세분화 하는게 좋을 듯, MeshLoader를 분리

	현재 메시의 기능이 너무 많다 생각:
	ex) 움직임, 충돌, 렌더링 정보 관리 등
	
	현재 탱크 오브젝트가 메시를 조작하는 형태임: 오브젝트가 모든 메시를 컨트롤해야함.
	탱크(Entity) 클래스가 -> 터렛 오브젝트에게 명령
	이렇게 된다면 탱크 - Actor class나 Entity클래스로 변화하는게 좋을 듯.
	구조 탱크(Entity) - 터렛(Object), 차체(Object) 등
	대충 생각해본 구조:
	엔티티 - 오브젝트 동작 및 상태 관리, 컴포넌트 관리
	오브젝트 - 렌더링 단위, 오브젝트의 특별한 기능을 담는 방식으론
	메시 - 오브젝트의 렌더링 정보 관리. 컴포넌트 같은 느낌으로 변화
	
	오브젝트나 메시에 접근시 인덱스 값으로 접근해 직관적으로 무엇을 조작하는지 헷갈림:
	unordered_map 또는 pair를 사용해 오브젝트나 메시를 이름으로 해시해두는 방법이 좋을듯.

	공용으로 사용되는 메시는 나눠서 쓰는 방향으로
	-> 한번의 바인드로 GPU에 정보를 올려두고 각 오브젝트 또는 엔티티에서 모델 변환을 적용해주는 방식으로 
	메시도 unordered_map에 해시해서 재사용 하는게 좋은 방향이라 생각.
	매번 파일을 읽어 메시를 로드하는건 매우 비효율적이기 때문임.

	카메라 충돌체크: 자꾸 벽을 넘어가서 시야가 보이지 않음.
	해결방안? 카메라 충돌체크?

	콜리전체크: 씬을 보내주고 씬에 대한 콜리전 체크를 수행하는게 좋을듯.
	ex) CollisionChecker(Scene)
	[어렵]
	OnGround 체크:
	콜리전 체크 방식으로 OnGround 상태가 되면 XZ평면도 충돌 체크가 되어 움직이지 못하는 경우 발생
	OnGround 체크는 정석 해결 방법을 찾지못해 오프셋 값을 주어 체크 - XZ평면 충돌 발생 X
	조금 더 좋은, 효율적인 방법을 찾아봐야함.

	[이건 좀 잘했다?]
	메시를 읽고 동적으로 minmax값을 계산해 AABB 콜리전 클래스 생성

	[마무리 느낀점]
	중앙에서 모든 것을 처리하려고 했지만, 이게 좋지 않은 방향이라는 것을 알게되었음.

양주호:
	생각날때 조금씩 작성해주십쇼
	문제점: 해결방향, 구현은 못했지만 있다면 더 좋은 방향?
	부탁드립니답.
	[아쉽]
	[어렵]
	[이건 좀 잘했다?]
	[마무리 느낀점]