유석진:
	[아쉽]
	파이썬의 모듈처럼 import하지 못하는 점이 아쉬움:
	Renderer 모듈을 세분화 해 Bind기능을 수행하는 모듈, 렌더 기능을 수행하는 모듈로 세분화 하는게 좋을 듯, MeshLoader를 분리

	현재 프레임워크는 오브젝트와 씬(월드)의 상호작용의 어려움: 오로지 씬 -> 오브젝트로 선형적인 소통
	해결하기 위해 현재 플레이어 컨트롤러에서 씬(월드)의 참조를 가지고 있게 수정
	씬과 오브젝트의 소통을 위한 class 혹은 모듈이 있으면 좋겠음.

	현재 메시의 기능이 너무 많다 생각:
	ex) 움직임, 충돌, 렌더링 정보 관리 등
	
	현재 탱크 오브젝트가 메시를 조작하는 형태임: 메시의 역할이 너무 많아짐
	탱크(Entity) 클래스가 -> 터렛 오브젝트에게 명령
	이렇게 된다면 탱크 - Actor class나 Entity클래스로 변화하는게 좋을 듯.
	구조 탱크(Entity) - 터렛(Object), 차체(Object) 등
	대충 생각해본 구조:
	엔티티 - 오브젝트 동작 및 상태 관리, 컴포넌트 관리
	오브젝트 - 공용 버텍스 좌표 관리, 렌더링 단위
	메시 - 오브젝트의 렌더링 정보 관리.
	
	오브젝트나 메시에 접근시 인덱스 값으로 접근해 직관적으로 무엇을 조작하는지 헷갈림:
	unordered_map 또는 pair를 사용해 오브젝트나 메시를 이름으로 해시해두는 방법이 좋을듯.

	[어렵]
	OnGround 체크:
	콜리전 체크 방식으로 OnGround 상태가 되면 XZ평면도 충돌 체크가 되어 움직이지 못하는 경우 발생
	OnGround 체크는 정석 해결 방법을 찾지못해 오프셋 값을 주어 체크 - XZ평면 충돌 발생 X
	조금 더 좋은, 효율적인 방법을 찾아봐야함.

	[이건 좀 잘했다?]
	메시를 읽고 동적으로 minmax값을 계산해 AABB 콜리전 클래스 생성

	[마무리 느낀점]

양주호:
	생각날때 조금씩 작성해주십쇼
	문제점: 해결방향, 구현은 못했지만 있다면 더 좋은 방향?
	부탁드립니답.
	[아쉽]
	[어렵]
	[이건 좀 잘했다?]
	[마무리 느낀점]